{"version":3,"sources":["step.js","App.js","serviceWorker.js","index.js"],"names":["Alert","props","elevation","variant","HorizontalLabelPositionBelowStepper","handleNext","state","activeStep","submit_1","console","log","setState","handleBack","handleReset","formatDate","date","split","reverse","join","$","val","Axios","method","url","BASE_URL","params","msisdn","birth","id","withCredentials","then","res","catch","err","b_validate","t_message","steps","proxyurl","stepIndex","className","Input","type","placeholder","Snackbar","open","this","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","Stepper","alternativeLabel","map","label","Step","key","StepLabel","length","style","padding","textAlign","Button","onClick","getStepContent","disabled","color","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e71ea35d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Stepper from '@material-ui/core/Stepper'\r\nimport Step from '@material-ui/core/Step'\r\nimport StepLabel from '@material-ui/core/StepLabel'\r\nimport Button from '@material-ui/core/Button'\r\nimport { Input, Snackbar } from '@material-ui/core'\r\nimport MuiAlert from '@material-ui/lab/Alert'\r\nimport Axios from 'axios'\r\nimport $ from 'jquery'\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//     root: {\r\n//         width: '100%',\r\n//     },\r\n//     backButton: {\r\n//         marginRight: theme.spacing(1),\r\n//     },\r\n//     instructions: {\r\n//         marginTop: theme.spacing(1),\r\n//         marginBottom: theme.spacing(1),\r\n//     },\r\n// }));\r\n\r\nexport default class HorizontalLabelPositionBelowStepper extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeStep: 0,\r\n            b_validate: false,\r\n            t_message: \"\"\r\n\r\n        }\r\n        this.steps = ['Step 1', 'Step 2', 'Result'];\r\n        this.BASE_URL = \"https://8gfcuh9717.execute-api.eu-west-1.amazonaws.com/rekon/rekon\"\r\n        // this.BASE_URL = \"https://covid19.mathdro.id/api\"\r\n        this.proxyurl = \"https://cors-anywhere.herokuapp.com/\"\r\n    }\r\n\r\n    handleNext = () => {\r\n        if (this.state.activeStep === 0) this.submit_1()\r\n\r\n        else if (this.state.activeStep === 1) console.log(\"step 2 clicked\")\r\n\r\n        else this.setState({ activeStep: this.state.activeStep + 1 })\r\n\r\n    };\r\n\r\n    handleBack = () => {\r\n        this.setState({ activeStep: this.state.activeStep - 1 })\r\n    };\r\n\r\n    handleReset = () => {\r\n        this.setState({ activeStep: 0 })\r\n    };\r\n\r\n    formatDate = (date) => {\r\n        return date.split(\"-\").reverse().join(\"-\")\r\n    }\r\n\r\n    submit_1 = () => {\r\n        if ($(\"#phone\").val() === \"\" || $(\"#id\").val() === \"\" || $(\"#birth\").val() === \"\") {\r\n            this.setState({ b_validate: true, t_message: \"please fill all fields\" })\r\n            return\r\n        }\r\n\r\n        Axios({\r\n            method: 'GET',\r\n            url: this.BASE_URL,\r\n            params: {\r\n                msisdn: $(\"#phone\").val(),\r\n                birth: this.formatDate($(\"#birth\").val()),\r\n                id: $(\"#id\").val()\r\n            },\r\n            withCredentials: true\r\n        }).then(res => {\r\n            console.log(res)\r\n        }).catch(err => console.log(err))\r\n\r\n        // this.setState({ activeStep: this.state.activeStep + 1 })\r\n    }\r\n\r\n    getStepContent(stepIndex) {\r\n        switch (stepIndex) {\r\n            case 0:\r\n                return <div className=\"step\">\r\n                    <Input id=\"phone\" type=\"number\" placeholder=\"phone\" />\r\n                    <Input id=\"id\" placeholder=\"id\" />\r\n                    <Input id=\"birth\" type=\"date\"></Input>\r\n                </div>;\r\n            case 1:\r\n                return 'second step formss';\r\n            case 2:\r\n                return 'validation result here...';\r\n            default:\r\n                return 'Unknown stepIndex';\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\" >\r\n                <Snackbar open={this.state.b_validate} autoHideDuration={2000} onClose={() => this.setState({ b_validate: false })} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>\r\n                    <Alert onClose={() => this.setState({ b_validate: false })} severity=\"warning\">{this.state.t_message}</Alert>\r\n                </Snackbar>\r\n                < Stepper activeStep={this.state.activeStep} alternativeLabel>\r\n                    {\r\n                        this.steps.map((label) => (\r\n                            <Step key={label}>\r\n                                <StepLabel>{label}</StepLabel>\r\n                            </Step>\r\n                        ))\r\n                    }\r\n                </Stepper >\r\n                <div>\r\n                    {this.state.activeStep === this.steps.length ? (\r\n                        <div style={{ padding: \"0 15%\", textAlign: 'center' }}>\r\n                            <Button onClick={this.handleReset}>Reset</Button>\r\n                        </div>\r\n                    ) : (\r\n                            <div style={{ padding: \"0 15%\", textAlign: \"center\" }}>\r\n                                <div >{this.getStepContent(this.state.activeStep)}</div>\r\n                                <div>\r\n                                    <Button disabled={this.state.activeStep === 0} onClick={this.handleBack} > Back </Button>\r\n                                    <Button variant=\"contained\" color=\"primary\" onClick={() => this.handleNext()}>\r\n                                        {this.state.activeStep === this.steps.length - 1 ? 'Finish' : 'Next'}\r\n                                    </Button>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n\r\n    // return(\r\n    //     <div className = \"container\" >\r\n    //     {/* <Snackbar open={this.state.b_validate} autoHideDuration={1500} onClose={() => this.setState({ b_validate: false })} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>\r\n    //             <Alert onClose={() => this.setState({ b_validate: false })} severity={this.state.serverity}>{this.state.t_message}</Alert>\r\n    //         </Snackbar> */}\r\n    //         < Stepper activeStep = { activeStep } alternativeLabel>\r\n    //         {\r\n    //             steps.map((label) => (\r\n    //                 <Step key={label}>\r\n    //                     <StepLabel>{label}</StepLabel>\r\n    //                 </Step>\r\n    //             ))\r\n    //         }\r\n    //         </Stepper >\r\n    // <div>\r\n    //     {activeStep === steps.length ? (\r\n    //         <div style={{ padding: \"0 15%\", textAlign: 'center' }}>\r\n    //             <Button onClick={handleReset}>Reset</Button>\r\n    //         </div>\r\n    //     ) : (\r\n    //             <div style={{ padding: \"0 15%\", textAlign: \"center\" }}>\r\n    //                 <div >{getStepContent(activeStep)}</div>\r\n    //                 <div>\r\n    //                     <Button disabled={activeStep === 0} onClick={handleBack}\r\n    //                     // className={classes.backButton}\r\n    //                     > Back </Button>\r\n    //                     <Button variant=\"contained\" color=\"primary\" onClick={handleNext}>\r\n    //                         {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n    //                     </Button>\r\n    //                 </div>\r\n    //             </div>\r\n    //         )}\r\n    // </div>\r\n    //     </div >\r\n    // );\r\n}","import React from 'react'\nimport './App.scss'\nimport Step from './step.js'\n\nfunction App() {\n  return (\n    <Step />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}